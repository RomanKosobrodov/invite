AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Prototype for restricting access to static web site resources to users authenticated by Cognito User Pool

Resources:
  RestrictedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "invite-kosobrodov-net-restricted"
  RestrictedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RestrictedBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${RestrictedBucket}/*"
            Principal:
              CanonicalUser: !GetAtt "CloudFrontOAI.S3CanonicalUserId"

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "invite-kosobrodov-net-frontend"
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${FrontendBucket}/*"
            Principal:
              CanonicalUser: !GetAtt "CloudFrontOAI.S3CanonicalUserId"

  PublicBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "invite-kosobrodov-net-public"
  PublicBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${PublicBucket}/*"
            Principal:
              CanonicalUser: !GetAtt "CloudFrontOAI.S3CanonicalUserId"

  LambdaEdgeFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: LambdaEdgeFunctionRoleForInvitePrototype
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"

  VerifyTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaEdgeFunctionRole.Arn
      Runtime: python3.9
      CodeUri: functions/verify/
      Handler: verify.handler
      Timeout: 5
      AutoPublishAlias: live

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "invite-kosobrodov-net-origin-access"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "Distribution for invite-kosobrodov-net"
        DefaultRootObject: "index.html"
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        DefaultCacheBehavior:
          DefaultTTL: 300
          ForwardedValues:
            QueryString: false
          TargetOriginId: public-website-bucket
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - Id: public-website-bucket
            DomainName: !GetAtt PublicBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
          - Id: restricted-website-bucket
            DomainName: !GetAtt RestrictedBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
          - Id: authorisation-frontend-bucket
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        CacheBehaviors:
          - PathPattern: authentication/*
            TargetOriginId: authorisation-frontend-bucket
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          - PathPattern: restricted/*
            TargetOriginId: restricted-website-bucket
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !Ref VerifyTokenFunction.Version
        Logging: !Ref AWS::NoValue

Outputs:
  RestrictedBucketName:
    Value: !Ref RestrictedBucket
    Description: Name of the S3 bucket to store content intended for authorised users
  FrontendBucketName:
    Value: !Ref FrontendBucket
    Description: Name of the S3 bucket for authorisation front-end
  PublicBucketName:
    Value: !Ref PublicBucket
    Description: Name of the S3 bucket to store public content of the website
  Distribution:
    Value: !GetAtt CloudFrontDistribution.DomainName
    Description: CloudFront Distribution URL
